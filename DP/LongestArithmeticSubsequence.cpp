// Given an array of integers find the longest arithmetic subsequence.
// Recursive Approach : Time Complexity : O(2^n), Space Complexity : O(n).
// Top Down Memoization Approach : Time Complexity : O(n^2), Space Complexity : O(n).
// Bottom Up Approach : Time Complexity : O(n^2), Space Complexity : O(n).
/* Input :
[1,6,11,16,21,26,31,36,41,46,51,56,61,66,71,76,81,86,91,96,101,106,111,116,121,126,131,136,141,146,151,156,161,166,171,176,181,186,191,196,201,206,211,216,221,226,231,236,241,246,251,256,261,266,271,276,281,286,291,296,301,306,311,316,321,326,331,336,341,346,351,356,361,366,371,1,4,7,10,13,16,19,22,25,28,31,34,37,40,43,46,49,52,55,58,61,64,67,70,73,76,79,82,85,88,91,94,97,100,103,106,109,112,115,118,121,124,127,130,133,136,139,142,145,148,151,154,157,160,163,166,169,172,175,178,181,184,187,190,193,196,199,202,205,208,211,214,217,220,223,226,229,232,235,238,241,244,247,250,253,256,259,262,265,268,271,274,277,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,6,11,16,21,26,31,36,41,46,51,56,61,66,71,76,81,86,91,96,101,106,111,116,121,126,131,136,141,146,151,156,161,166,171,176,181,186,191,196,201,206,211,216,221,226,231,236,241,246,251,256,261,266,271,276,281,286,291,296,301,1,3,5,7,9,11,13,15,17,19,21,23,25,27,29,31,33,35,37,39,41,43,45,47,49,51,53,55,57,59,61,63,65,67,69,71,73,75,77,79,81,83,85,87,89,91,93,95,97,99,101,103,105,107,109,111,113,115,117,119,1,6,11,16,21,26,31,36,41,46,51,56,61,66,71,76,81,86,91,96,101,106,111,116,121,126,131,136,141,146,151,156,161,166,171,176,181,186,191,196,201,206,211,216,221,226,231,236,241,246,251,256,261,266,271,276,281,286,291,296,301,306,311,316,321,326,331,336,341,346,351,356,361,366,371,376,381,386,1,6,11,16,21,26,31,36,41,46,51,56,61,66,71,76,81,86,91,96,101,106,111,116,121,126,131,136,141,146,151,156,161,166,171,176,181,186,191,196,201,206,211,216,221,226,231,236,241,246,251,256,261,266,271,276,281,286,291,296,301,306,311,316,321,326,331,336,341,346,351,356,361,366,371,376,381,386,391,396,401,406,411,416,421,426,431,436,441,446,1,5,9,13,17,21,25,29,33,37,41,45,49,53,57,61,65,69,73,77,81,85,89,93,97,101,105,109,113,117,121,125,129,133,137,141,145,149,153,157,161,165,169,173,177,181,185,189,193,197,201,205,209,213,217,221,225,229,233,237,241,245,249,253,257,261,265,269,273,277,281,285,289,293,297,301,305,309,313,317,321,325,329,333,337,341,345,349,353,357,361,365,369,373,377,381,385,389,393,1,5,9,13,17,21,25,29,33,37,41,45,49,53,57,1,2,3,4,5,6,7,1,5,9,13,17,21,25,29,33,37,41,45,49,53,57,61,65,69,73,77,81,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,1,4,7,10,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,3,5,7,9,11,13,15,17,19,21,23,25,27,29,31,33,35,37,39,41,43,45,47,49,51,53,55,57,59,61,63,65,67,69,71,73,75,77,79,81,83,85,87,89,91,93,95,97,99,101,103,105,107,109,111,113,115,117,119,121,123,125,127,129,131,1,5,9,13,17,21,25,29,33,37,41,45,49,53,57,61,65,69,73,77,81,85,89,93,97,101,105,109,113,117,121,125,129,133,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,1,4,7,10,13,16,19,22,25,28,31,34,37,40,43,46,49,52,55,58,61,64,67,70,73,76,79,82,85,88,91,94,97,100,103,106,109,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,1,2,3,4,1,3,1,1,2,3,1,4,1,1,4,7]

Output : 104
*/

#include<iostream>
#include<vector>
#include<limits.h>
#include<unordered_map>
using namespace std;

int checkBackwards(int index, int &commonDiff, vector<int> &nums){
    // Base Case.
    if(index < 0){
        return 0;
    }

    int ans = 0;
    for(int j=index-1; j>=0; j--){
        if(nums[index] - nums[j] == commonDiff){
            ans = max(ans, 1+checkBackwards(j, commonDiff, nums));
        }
    }

    return ans;
}

int solveRecursively(vector<int> &nums, int &n){
    if(n <= 2){
        return n;
    }

    int ans = INT_MIN;
    for(int i=0; i<n; i++){
        for(int j=i+1; j<n; j++){
            int commonDiff = nums[j] - nums[i];

            ans = max(ans, 2+checkBackwards(i, commonDiff, nums));
        }
    }

    return ans;
}

int checkBackwardsDP(int index, int &commonDiff, vector<int> &nums, unordered_map<int,int> dp[]){
    // Base Case.
    if(index < 0){
        return 0;
    }

    int ans = 0;
    for(int j=index-1; j>=0; j--){
        if(nums[index] - nums[j] == commonDiff){
            ans = max(ans, 1+checkBackwardsDP(j, commonDiff, nums, dp));
        }
    }

    return ans;
}

int solveTopDownMemo(vector<int> &nums, int &n){
    if(n <= 2){
        return n;
    }

    unordered_map<int,int> dp[n+1];
    int ans = INT_MIN;
    for(int i=0; i<n; i++){
        for(int j=i+1; j<n; j++){
            int commonDiff = nums[j] - nums[i];

            ans = max(ans, 2+checkBackwardsDP(i, commonDiff, nums, dp));
        }
    }

    return ans;
}

int main()
{
    int n;
    cout<<"Enter the size of the array"<<endl;
    cin>>n; // 7

    vector<int> nums(n, 0);
    cout<<"Enter the elements of the array"<<endl;
    for(int i=0; i<n; i++){
        cin>>nums[i]; // 20 1 15 3 10 5 8
    }

    // Recursive Approach.
    // int ans = solveRecursively(nums, n);

    // Top Down Memoization Approach.
    // int ans = solveTopDownMemo(nums, n);

    // Bottom Up Approach.
    int ans = 0;
    vector<vector<int>> dp(n, vector<int> (1001, 0));

    for(int i=0; i<n; i++){
        for(int j=0; j<i; j++){
            int diff = nums[i] - nums[j] + 500;

            dp[i][diff] = dp[j][diff] > 0 ? dp[j][diff] + 1 : 2;
            ans = max(ans, dp[i][diff]);    
        }
    }

    cout<<"Length of longest Arithmetic Subsequence is : "<<ans<<endl; // 4.

    return 0;
}